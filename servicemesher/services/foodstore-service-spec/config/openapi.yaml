openapi: 3.0.0
info:
  version: 1.0.0
  title: Swagger Foodstore
  license:
    name: MIT
servers:
  - url: 'http://foodstore.swagger.io/v1'
paths:
  /food:
    get:
      summary: List all food
      operationId: listFood
      tags:
        - food
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      security:
        - foodstore_auth:
            - 'read:food'
      responses:
        '200':
          description: An paged array of food
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
              example:
                - id: 1
                  name: Noodle
                  tag: food
                - id: 2
                  name: Rice
                  tag: food
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a food
      operationId: createfood
      requestBody:
        description: food to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      tags:
        - food
      security:
        - foodstore_auth:
            - 'read:food'
            - 'write:food'
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/food/{foodId}':
    get:
      summary: Info for a specific food
      operationId: showFoodById
      tags:
        - food
      parameters:
        - name: foodId
          in: path
          required: true
          description: The id of the food to retrieve
          schema:
            type: string
      security:
        - foodstore_auth:
            - 'read:food'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
              example:
                id: 1
                name: Noodle
                tag: food
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a specific food
      operationId: deletefoodById
      tags:
        - food
      parameters:
        - name: foodId
          in: path
          required: true
          description: The id of the food to delete
          schema:
            type: string
        - name: key
          in: header
          required: true
          description: The key header
          schema:
            type: string
      security:
        - foodstore_auth:
            - 'write:food'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
              examples:
                response:
                  value:
                    id: 1
                    name: Noodle
                    tag: food
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    foodstore_auth:
      type: oauth2
      description: This API uses OAuth 2 with the client credential grant flow.
      flows:
        clientCredentials:
          tokenUrl: 'https://localhost:6882/token'
          scopes:
            'write:food': modify food in your account
            'read:food': read your food
  schemas:
    Food:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
